/// <auto-generated/>
#pragma warning disable
#nullable enable

using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using SemestralProject.Utils;

namespace SemestralProject.Model.Entities
{
    public partial class Stop : AsynchronousEntity
    {
        /// <summary>
        /// Creates new stop.
        /// </summary>
        /// <param name="id"> Identifier of stop. </param>
        /// <param name="code"> Code of the stop. </param>
        /// <param name="name"> Name of the stop. </param>
        private Stop(int id, string code, string name)
        {
            this.Id = id;
            this.Code = code;
            this.Name = name;
        }

        /// <summary>
        /// Creates new stop.
        /// </summary>
        /// <param name="code"> Code of the stop. </param>
        /// <param name="name"> Name of the stop. </param>
        /// <returns>Newly created stop. </returns>
        public static Stop Create(string code, string name)
        {
            string sql = $"sempr_crud.proc_zastavky_create('{code}', '{name}')";
            int id = Entity.Create(sql, "zastavky_seq");
            return new Stop(id, code, name);
        }

        /// <summary>
        /// Creates new stop asynchronously.
        /// </summary>
        /// <param name="code"> Code of the stop. </param>
        /// <param name="name"> Name of the stop. </param>
        /// <returns>Task which resolves into newly created stop. </returns>
        public static Task<Stop> CreateAsync(string code, string name)
        {
            return Task<Stop>.Run(() =>
            {
                return Stop.Create(code, name);
            });
        }

        /// <summary>
        /// Gets all available stops.
        /// </summary>
        /// <returns>
        /// All available stops.
        /// </returns>
        public static Stop[] GetAll()
        {
            IList<Stop> reti = new List<Stop>();
            IDictionary<string, object?>[] results = Stop.Read("sempr_crud.func_zastavky_read()");
            foreach(IDictionary<string, object?> row in results)
            {
                Stop? stop = Stop.Parse(row);
                if (stop != null)
                {
                    reti.Add(stop);
                }
            }
            return reti.ToArray();
        }

        /// <summary>
        /// Gets all available stops asynchronously.
        /// </summary>
        /// <returns>
        /// Task which resolves into array with all available stops.
        /// </returns>
        public static Task<Stop[]> GetAllAsync()
        {
            return Task<Stop[]>.Run(() => 
            {
                return Stop.GetAll();
            });
        }

        /// <summary>
        /// Gets stop by its identifier.
        /// </summary>
        /// <param name="id"> Identifier of searched stop. </param>
        /// <returns>
        /// Stop with searched identifier,
        /// or NULL if there is no such stop.
        /// </returns>
        public static Stop? GetById(int id)
        {
            Stop? reti = null;
            string sql = $"sempr_crud.func_zastavky_read({id})";
            IDictionary<string, object?>[] results = Stop.Read(sql);
            if (results.Length > 0)
            {
                reti = Stop.Parse(results[0]);
            }
            return reti;
        }

        /// <summary>
        /// Gets stop by its identifier asynchronously.
        /// </summary>
        /// <param name="id"> Identifier of searched stop. </param>
        /// <returns>
        /// Task which resolves into:
        /// stop with searched identifier,
        /// or NULL if there is no such stop.
        /// </returns>
        public static Task<Stop?> GetByIdAsync(int id)
        {
            return Task<Stop?>.Run(() => 
            {
                return Stop.GetById(id);
            });
        }

        /// <summary>
        /// Parses stop from result of database query.
        /// </summary>
        /// <param name="data">Source of data for entity.</param>
        private static Stop? Parse(IDictionary<string, object?> data)
        {
            Stop? reti = null;
            int id = (int)(data["id_zastavka"] ?? int.MinValue);
            string code = (string)(data["kod"] ?? string.Empty);
            string name = (string)(data["nazev"] ?? string.Empty);
            reti = new Stop(id, code, name);
            return reti;
        }

        /// <inheritdoc/>
        public override bool Update()
        {
            string sql = $"sempr_crud.proc_zastavky_update({this.Id}, '{this.Code}', '{this.Name}')";
            return Stop.Update(sql);
        }

        /// <inheritdoc/>
        public override bool Delete()
        {
            string sql = $"sempr_crud.proc_zastavky_delete({this.Id})";
            return Stop.Delete(sql);
        }

    }
}
