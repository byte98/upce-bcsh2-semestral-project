/// <auto-generated/>
#pragma warning disable
#nullable enable

using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using SemestralProject.Utils;

namespace SemestralProject.Model.Entities
{
    public partial class Vehicle : AsynchronousEntity
    {
        /// <summary>
        /// Creates new vehicle.
        /// </summary>
        /// <param name="id"> Identifier of vehicle. </param>
        /// <param name="evidencenumber"> Evidential number for the vehicle. </param>
        /// <param name="vehicletype"> Type of Vehicle. </param>
        private Vehicle(int id, string evidencenumber, string vehicletype)
        {
            this.Id = id;
            this.EvidenceNumber = evidencenumber;
            this.VehicleType = vehicletype;
        }

        /// <summary>
        /// Creates new vehicle.
        /// </summary>
        /// <param name="evidencenumber"> Evidential number for the vehicle. </param>
        /// <param name="vehicletype"> Type of Vehicle. </param>
        /// <returns>Newly created vehicle. </returns>
        public static Vehicle Create(string evidencenumber, string vehicletype)
        {
            string sql = $"sempr_crud.proc_vozidla_create('{evidencenumber}', '{vehicletype}')";
            int id = Entity.Create(sql, "vozidla_seq");
            return new Vehicle(id, evidencenumber, vehicletype);
        }

        /// <summary>
        /// Creates new vehicle asynchronously.
        /// </summary>
        /// <param name="evidencenumber"> Evidential number for the vehicle. </param>
        /// <param name="vehicletype"> Type of Vehicle. </param>
        /// <returns>Task which resolves into newly created vehicle. </returns>
        public static Task<Vehicle> CreateAsync(string evidencenumber, string vehicletype)
        {
            return Task<Vehicle>.Run(() =>
            {
                return Vehicle.Create(evidencenumber, vehicletype);
            });
        }

        /// <summary>
        /// Gets all available vehicles.
        /// </summary>
        /// <returns>
        /// All available vehicles.
        /// </returns>
        public static Vehicle[] GetAll()
        {
            IList<Vehicle> reti = new List<Vehicle>();
            IDictionary<string, object?>[] results = Vehicle.Read("sempr_crud.func_vozidla_read()");
            foreach(IDictionary<string, object?> row in results)
            {
                Vehicle? vehicle = Vehicle.Parse(row);
                if (vehicle != null)
                {
                    reti.Add(vehicle);
                }
            }
            return reti.ToArray();
        }

        /// <summary>
        /// Gets all available vehicles asynchronously.
        /// </summary>
        /// <returns>
        /// Task which resolves into array with all available vehicles.
        /// </returns>
        public static Task<Vehicle[]> GetAllAsync()
        {
            return Task<Vehicle[]>.Run(() => 
            {
                return Vehicle.GetAll();
            });
        }

        /// <summary>
        /// Gets vehicle by its identifier.
        /// </summary>
        /// <param name="id"> Identifier of searched vehicle. </param>
        /// <returns>
        /// Vehicle with searched identifier,
        /// or NULL if there is no such vehicle.
        /// </returns>
        public static Vehicle? GetById(int id)
        {
            Vehicle? reti = null;
            string sql = $"sempr_crud.func_vozidla_read({id})";
            IDictionary<string, object?>[] results = Vehicle.Read(sql);
            if (results.Length > 0)
            {
                reti = Vehicle.Parse(results[0]);
            }
            return reti;
        }

        /// <summary>
        /// Gets vehicle by its identifier asynchronously.
        /// </summary>
        /// <param name="id"> Identifier of searched vehicle. </param>
        /// <returns>
        /// Task which resolves into:
        /// vehicle with searched identifier,
        /// or NULL if there is no such vehicle.
        /// </returns>
        public static Task<Vehicle?> GetByIdAsync(int id)
        {
            return Task<Vehicle?>.Run(() => 
            {
                return Vehicle.GetById(id);
            });
        }

        /// <summary>
        /// Parses vehicle from result of database query.
        /// </summary>
        /// <param name="data">Source of data for entity.</param>
        private static Vehicle? Parse(IDictionary<string, object?> data)
        {
            Vehicle? reti = null;
            int id = (int)(data["id_vozidlo"] ?? int.MinValue);
            string evidencenumber = (string)(data["evidencni_cislo"] ?? string.Empty);
            string vehicletype = (string)(data["typ_vozidla"] ?? string.Empty);
            reti = new Vehicle(id, evidencenumber, vehicletype);
            return reti;
        }

        /// <inheritdoc/>
        public override bool Update()
        {
            string sql = $"sempr_crud.proc_vozidla_update({this.Id}, '{this.EvidenceNumber}', '{this.VehicleType}')";
            return Vehicle.Update(sql);
        }

        /// <inheritdoc/>
        public override bool Delete()
        {
            string sql = $"sempr_crud.proc_vozidla_delete({this.Id})";
            return Vehicle.Delete(sql);
        }

    }
}
