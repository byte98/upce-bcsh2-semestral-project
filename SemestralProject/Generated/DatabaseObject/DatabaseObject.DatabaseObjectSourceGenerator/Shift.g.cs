/// <auto-generated/>
#pragma warning disable
#nullable enable

using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using SemestralProject.Utils;

namespace SemestralProject.Model.Entities
{
    public partial class Shift : AsynchronousEntity
    {
        /// <summary>
        /// Creates new shift.
        /// </summary>
        /// <param name="id"> Identifier of shift. </param>
        /// <param name="code"> Code of the stop. </param>
        /// <param name="name"> Name of the stop. </param>
        private Shift(int id, int code, string name)
        {
            this.Id = id;
            this.Code = code;
            this.Name = name;
        }

        /// <summary>
        /// Creates new shift.
        /// </summary>
        /// <param name="code"> Code of the stop. </param>
        /// <param name="name"> Name of the stop. </param>
        /// <returns>Newly created shift. </returns>
        public static Shift Create(int code, string name)
        {
            string sql = $"sempr_crud.proc_smeny_create({code}, '{name}')";
            int id = Entity.Create(sql, "smeny_seq");
            return new Shift(id, code, name);
        }

        /// <summary>
        /// Creates new shift asynchronously.
        /// </summary>
        /// <param name="code"> Code of the stop. </param>
        /// <param name="name"> Name of the stop. </param>
        /// <returns>Task which resolves into newly created shift. </returns>
        public static Task<Shift> CreateAsync(int code, string name)
        {
            return Task<Shift>.Run(() =>
            {
                return Shift.Create(code, name);
            });
        }

        /// <summary>
        /// Gets all available shifts.
        /// </summary>
        /// <returns>
        /// All available shifts.
        /// </returns>
        public static Shift[] GetAll()
        {
            IList<Shift> reti = new List<Shift>();
            IDictionary<string, object?>[] results = Shift.Read("sempr_crud.func_smeny_read()");
            foreach(IDictionary<string, object?> row in results)
            {
                Shift? shift = Shift.Parse(row);
                if (shift != null)
                {
                    reti.Add(shift);
                }
            }
            return reti.ToArray();
        }

        /// <summary>
        /// Gets all available shifts asynchronously.
        /// </summary>
        /// <returns>
        /// Task which resolves into array with all available shifts.
        /// </returns>
        public static Task<Shift[]> GetAllAsync()
        {
            return Task<Shift[]>.Run(() => 
            {
                return Shift.GetAll();
            });
        }

        /// <summary>
        /// Gets shift by its identifier.
        /// </summary>
        /// <param name="id"> Identifier of searched shift. </param>
        /// <returns>
        /// Shift with searched identifier,
        /// or NULL if there is no such shift.
        /// </returns>
        public static Shift? GetById(int id)
        {
            Shift? reti = null;
            string sql = $"sempr_crud.func_smeny_read({id})";
            IDictionary<string, object?>[] results = Shift.Read(sql);
            if (results.Length > 0)
            {
                reti = Shift.Parse(results[0]);
            }
            return reti;
        }

        /// <summary>
        /// Gets shift by its identifier asynchronously.
        /// </summary>
        /// <param name="id"> Identifier of searched shift. </param>
        /// <returns>
        /// Task which resolves into:
        /// shift with searched identifier,
        /// or NULL if there is no such shift.
        /// </returns>
        public static Task<Shift?> GetByIdAsync(int id)
        {
            return Task<Shift?>.Run(() => 
            {
                return Shift.GetById(id);
            });
        }

        /// <summary>
        /// Parses shift from result of database query.
        /// </summary>
        /// <param name="data">Source of data for entity.</param>
        private static Shift? Parse(IDictionary<string, object?> data)
        {
            Shift? reti = null;
            int id = (int)(data["id_smena"] ?? int.MinValue);
            int code = (int)(data["id_smena"] ?? int.MinValue);
            string name = (string)(data["nazev"] ?? string.Empty);
            reti = new Shift(id, code, name);
            return reti;
        }

        /// <inheritdoc/>
        public override bool Update()
        {
            string sql = $"sempr_crud.proc_smeny_update({this.Id}, {this.Code}, '{this.Name}')";
            return Shift.Update(sql);
        }

        /// <inheritdoc/>
        public override bool Delete()
        {
            string sql = $"sempr_crud.proc_smeny_delete({this.Id})";
            return Shift.Delete(sql);
        }

    }
}
