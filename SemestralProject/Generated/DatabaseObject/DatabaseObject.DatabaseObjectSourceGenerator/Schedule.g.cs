/// <auto-generated/>
#pragma warning disable
#nullable enable

using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using SemestralProject.Utils;

namespace SemestralProject.Model.Entities
{
    public partial class Schedule : AsynchronousEntity
    {
        /// <summary>
        /// Creates new schedule.
        /// </summary>
        /// <param name="id"> Identifier of schedule. </param>
        /// <param name="arrival"> Time of arrival. </param>
        /// <param name="departure"> Time of departure. </param>
        /// <param name="sequencenumber"> Number of schedule in sequence. </param>
        /// <param name="variant"> Variant of schedule. </param>
        /// <param name="line"> Line of schedule. </param>
        /// <param name="stop"> Stop of schedule. </param>
        private Schedule(int id, DateTime arrival, DateTime departure, int sequencenumber, int variant, Line line, Stop stop)
        {
            this.Id = id;
            this.Arrival = arrival;
            this.Departure = departure;
            this.SequenceNumber = sequencenumber;
            this.Variant = variant;
            this.Line = line;
            this.Stop = stop;
        }

        /// <summary>
        /// Creates new schedule.
        /// </summary>
        /// <param name="arrival"> Time of arrival. </param>
        /// <param name="departure"> Time of departure. </param>
        /// <param name="sequencenumber"> Number of schedule in sequence. </param>
        /// <param name="variant"> Variant of schedule. </param>
        /// <param name="line"> Line of schedule. </param>
        /// <param name="stop"> Stop of schedule. </param>
        /// <returns>Newly created schedule. </returns>
        public static Schedule Create(DateTime arrival, DateTime departure, int sequencenumber, int variant, Line line, Stop stop)
        {
            string sql = $"sempr_crud.proc_jizdni_rady_create({DateUtils.ToSQL(arrival)}, {DateUtils.ToSQL(departure)}, {sequencenumber}, {variant}, {line.Id}, {stop.Id})";
            int id = Entity.Create(sql, "jizdni_rady_seq");
            return new Schedule(id, arrival, departure, sequencenumber, variant, line, stop);
        }

        /// <summary>
        /// Creates new schedule asynchronously.
        /// </summary>
        /// <param name="arrival"> Time of arrival. </param>
        /// <param name="departure"> Time of departure. </param>
        /// <param name="sequencenumber"> Number of schedule in sequence. </param>
        /// <param name="variant"> Variant of schedule. </param>
        /// <param name="line"> Line of schedule. </param>
        /// <param name="stop"> Stop of schedule. </param>
        /// <returns>Task which resolves into newly created schedule. </returns>
        public static Task<Schedule> CreateAsync(DateTime arrival, DateTime departure, int sequencenumber, int variant, Line line, Stop stop)
        {
            return Task<Schedule>.Run(() =>
            {
                return Schedule.Create(arrival, departure, sequencenumber, variant, line, stop);
            });
        }

        /// <summary>
        /// Gets all available schedules.
        /// </summary>
        /// <returns>
        /// All available schedules.
        /// </returns>
        public static Schedule[] GetAll()
        {
            IList<Schedule> reti = new List<Schedule>();
            IDictionary<string, object?>[] results = Schedule.Read("sempr_crud.func_jizdni_rady_read()");
            foreach(IDictionary<string, object?> row in results)
            {
                Schedule? schedule = Schedule.Parse(row);
                if (schedule != null)
                {
                    reti.Add(schedule);
                }
            }
            return reti.ToArray();
        }

        /// <summary>
        /// Gets all available schedules asynchronously.
        /// </summary>
        /// <returns>
        /// Task which resolves into array with all available schedules.
        /// </returns>
        public static Task<Schedule[]> GetAllAsync()
        {
            return Task<Schedule[]>.Run(() => 
            {
                return Schedule.GetAll();
            });
        }

        /// <summary>
        /// Gets schedule by its identifier.
        /// </summary>
        /// <param name="id"> Identifier of searched schedule. </param>
        /// <returns>
        /// Schedule with searched identifier,
        /// or NULL if there is no such schedule.
        /// </returns>
        public static Schedule? GetById(int id)
        {
            Schedule? reti = null;
            string sql = $"sempr_crud.func_jizdni_rady_read({id})";
            IDictionary<string, object?>[] results = Schedule.Read(sql);
            if (results.Length > 0)
            {
                reti = Schedule.Parse(results[0]);
            }
            return reti;
        }

        /// <summary>
        /// Gets schedule by its identifier asynchronously.
        /// </summary>
        /// <param name="id"> Identifier of searched schedule. </param>
        /// <returns>
        /// Task which resolves into:
        /// schedule with searched identifier,
        /// or NULL if there is no such schedule.
        /// </returns>
        public static Task<Schedule?> GetByIdAsync(int id)
        {
            return Task<Schedule?>.Run(() => 
            {
                return Schedule.GetById(id);
            });
        }

        /// <summary>
        /// Parses schedule from result of database query.
        /// </summary>
        /// <param name="data">Source of data for entity.</param>
        private static Schedule? Parse(IDictionary<string, object?> data)
        {
            Schedule? reti = null;
            int id = (int)(data["id_jizdni_rad"] ?? int.MinValue);
            DateTime arrival = (DateTime)(DateUtils.FromQuery(data["cas_prijezdu"]) ?? DateTime.Now);
            DateTime departure = (DateTime)(DateUtils.FromQuery(data["cas_odjezdu"]) ?? DateTime.Now);
            int sequencenumber = (int)(data["poradove_cislo"] ?? int.MinValue);
            int variant = (int)(data["varianta"] ?? int.MinValue);
            Line? line = Line.GetById((int)(data["linka"] ?? int.MinValue));
            Stop? stop = Stop.GetById((int)(data["zastavka"] ?? int.MinValue));
            if (line != null && stop != null)
            {
                reti = new Schedule(id, arrival, departure, sequencenumber, variant, line, stop);
            }
            return reti;
        }

        /// <inheritdoc/>
        public override bool Update()
        {
            string sql = $"sempr_crud.proc_jizdni_rady_update({this.Id}, {DateUtils.ToSQL(this.Arrival)}, {DateUtils.ToSQL(this.Departure)}, {this.SequenceNumber}, {this.Variant}, {this.Line.Id}, {this.Stop.Id})";
            return Schedule.Update(sql);
        }

        /// <inheritdoc/>
        public override bool Delete()
        {
            string sql = $"sempr_crud.proc_jizdni_rady_delete({this.Id})";
            return Schedule.Delete(sql);
        }

    }
}
