// <auto-generated/>
#pragma warning disable
#nullable enable
namespace SemestralProject.ViewModel.Pages
{
    /// <inheritdoc/>
    partial class PermissionsPageViewModel
    {
        /// <inheritdoc cref="detailsVisible"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool DetailsVisible
        {
            get => detailsVisible;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(detailsVisible, value))
                {
                    OnDetailsVisibleChanging(value);
                    OnDetailsVisibleChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.DetailsVisible);
                    detailsVisible = value;
                    OnDetailsVisibleChanged(value);
                    OnDetailsVisibleChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.DetailsVisible);
                }
            }
        }

        /// <inheritdoc cref="loaderVisibility"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public global::System.Windows.Visibility LoaderVisibility
        {
            get => loaderVisibility;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<global::System.Windows.Visibility>.Default.Equals(loaderVisibility, value))
                {
                    OnLoaderVisibilityChanging(value);
                    OnLoaderVisibilityChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.LoaderVisibility);
                    loaderVisibility = value;
                    OnLoaderVisibilityChanged(value);
                    OnLoaderVisibilityChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.LoaderVisibility);
                }
            }
        }

        /// <inheritdoc cref="contentVisibility"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public global::System.Windows.Visibility ContentVisibility
        {
            get => contentVisibility;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<global::System.Windows.Visibility>.Default.Equals(contentVisibility, value))
                {
                    OnContentVisibilityChanging(value);
                    OnContentVisibilityChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ContentVisibility);
                    contentVisibility = value;
                    OnContentVisibilityChanged(value);
                    OnContentVisibilityChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ContentVisibility);
                }
            }
        }

        /// <inheritdoc cref="waitVisibility"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public global::System.Windows.Visibility WaitVisibility
        {
            get => waitVisibility;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<global::System.Windows.Visibility>.Default.Equals(waitVisibility, value))
                {
                    OnWaitVisibilityChanging(value);
                    OnWaitVisibilityChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.WaitVisibility);
                    waitVisibility = value;
                    OnWaitVisibilityChanged(value);
                    OnWaitVisibilityChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.WaitVisibility);
                }
            }
        }

        /// <inheritdoc cref="allRoles"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Role> AllRoles
        {
            get => allRoles;
            [global::System.Diagnostics.CodeAnalysis.MemberNotNull("allRoles")]
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Role>>.Default.Equals(allRoles, value))
                {
                    OnAllRolesChanging(value);
                    OnAllRolesChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.AllRoles);
                    allRoles = value;
                    OnAllRolesChanged(value);
                    OnAllRolesChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.AllRoles);
                }
            }
        }

        /// <inheritdoc cref="selectedRole"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public global::SemestralProject.Model.Entities.Role? SelectedRole
        {
            get => selectedRole;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<global::SemestralProject.Model.Entities.Role?>.Default.Equals(selectedRole, value))
                {
                    OnSelectedRoleChanging(value);
                    OnSelectedRoleChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.SelectedRole);
                    selectedRole = value;
                    OnSelectedRoleChanged(value);
                    OnSelectedRoleChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.SelectedRole);
                }
            }
        }

        /// <inheritdoc cref="selectedPermissions"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Permission> SelectedPermissions
        {
            get => selectedPermissions;
            [global::System.Diagnostics.CodeAnalysis.MemberNotNull("selectedPermissions")]
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Permission>>.Default.Equals(selectedPermissions, value))
                {
                    OnSelectedPermissionsChanging(value);
                    OnSelectedPermissionsChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.SelectedPermissions);
                    selectedPermissions = value;
                    OnSelectedPermissionsChanged(value);
                    OnSelectedPermissionsChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.SelectedPermissions);
                }
            }
        }

        /// <summary>Executes the logic for when <see cref="DetailsVisible"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="DetailsVisible"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnDetailsVisibleChanging(bool value);
        /// <summary>Executes the logic for when <see cref="DetailsVisible"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="DetailsVisible"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnDetailsVisibleChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="DetailsVisible"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="DetailsVisible"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnDetailsVisibleChanged(bool value);
        /// <summary>Executes the logic for when <see cref="DetailsVisible"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="DetailsVisible"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnDetailsVisibleChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="LoaderVisibility"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="LoaderVisibility"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnLoaderVisibilityChanging(global::System.Windows.Visibility value);
        /// <summary>Executes the logic for when <see cref="LoaderVisibility"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="LoaderVisibility"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnLoaderVisibilityChanging(global::System.Windows.Visibility oldValue, global::System.Windows.Visibility newValue);
        /// <summary>Executes the logic for when <see cref="LoaderVisibility"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="LoaderVisibility"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnLoaderVisibilityChanged(global::System.Windows.Visibility value);
        /// <summary>Executes the logic for when <see cref="LoaderVisibility"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="LoaderVisibility"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnLoaderVisibilityChanged(global::System.Windows.Visibility oldValue, global::System.Windows.Visibility newValue);
        /// <summary>Executes the logic for when <see cref="ContentVisibility"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ContentVisibility"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnContentVisibilityChanging(global::System.Windows.Visibility value);
        /// <summary>Executes the logic for when <see cref="ContentVisibility"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ContentVisibility"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnContentVisibilityChanging(global::System.Windows.Visibility oldValue, global::System.Windows.Visibility newValue);
        /// <summary>Executes the logic for when <see cref="ContentVisibility"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ContentVisibility"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnContentVisibilityChanged(global::System.Windows.Visibility value);
        /// <summary>Executes the logic for when <see cref="ContentVisibility"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ContentVisibility"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnContentVisibilityChanged(global::System.Windows.Visibility oldValue, global::System.Windows.Visibility newValue);
        /// <summary>Executes the logic for when <see cref="WaitVisibility"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="WaitVisibility"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnWaitVisibilityChanging(global::System.Windows.Visibility value);
        /// <summary>Executes the logic for when <see cref="WaitVisibility"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="WaitVisibility"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnWaitVisibilityChanging(global::System.Windows.Visibility oldValue, global::System.Windows.Visibility newValue);
        /// <summary>Executes the logic for when <see cref="WaitVisibility"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="WaitVisibility"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnWaitVisibilityChanged(global::System.Windows.Visibility value);
        /// <summary>Executes the logic for when <see cref="WaitVisibility"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="WaitVisibility"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnWaitVisibilityChanged(global::System.Windows.Visibility oldValue, global::System.Windows.Visibility newValue);
        /// <summary>Executes the logic for when <see cref="AllRoles"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="AllRoles"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnAllRolesChanging(global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Role> value);
        /// <summary>Executes the logic for when <see cref="AllRoles"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="AllRoles"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnAllRolesChanging(global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Role>? oldValue, global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Role> newValue);
        /// <summary>Executes the logic for when <see cref="AllRoles"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="AllRoles"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnAllRolesChanged(global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Role> value);
        /// <summary>Executes the logic for when <see cref="AllRoles"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="AllRoles"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnAllRolesChanged(global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Role>? oldValue, global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Role> newValue);
        /// <summary>Executes the logic for when <see cref="SelectedRole"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="SelectedRole"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnSelectedRoleChanging(global::SemestralProject.Model.Entities.Role? value);
        /// <summary>Executes the logic for when <see cref="SelectedRole"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="SelectedRole"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnSelectedRoleChanging(global::SemestralProject.Model.Entities.Role? oldValue, global::SemestralProject.Model.Entities.Role? newValue);
        /// <summary>Executes the logic for when <see cref="SelectedRole"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="SelectedRole"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnSelectedRoleChanged(global::SemestralProject.Model.Entities.Role? value);
        /// <summary>Executes the logic for when <see cref="SelectedRole"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="SelectedRole"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnSelectedRoleChanged(global::SemestralProject.Model.Entities.Role? oldValue, global::SemestralProject.Model.Entities.Role? newValue);
        /// <summary>Executes the logic for when <see cref="SelectedPermissions"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="SelectedPermissions"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnSelectedPermissionsChanging(global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Permission> value);
        /// <summary>Executes the logic for when <see cref="SelectedPermissions"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="SelectedPermissions"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnSelectedPermissionsChanging(global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Permission>? oldValue, global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Permission> newValue);
        /// <summary>Executes the logic for when <see cref="SelectedPermissions"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="SelectedPermissions"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnSelectedPermissionsChanged(global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Permission> value);
        /// <summary>Executes the logic for when <see cref="SelectedPermissions"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="SelectedPermissions"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.2.0.0")]
        partial void OnSelectedPermissionsChanged(global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Permission>? oldValue, global::System.Collections.ObjectModel.ObservableCollection<global::SemestralProject.Model.Entities.Permission> newValue);
    }
}