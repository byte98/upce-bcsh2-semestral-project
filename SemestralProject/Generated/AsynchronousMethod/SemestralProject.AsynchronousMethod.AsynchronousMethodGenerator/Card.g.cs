// <auto-generated />
#pragma warning diable
#nullable enable

using System.Threading.Tasks;
namespace SemestralProject.Model.Entities
{
    public partial class Card
    {
        /// <summary>
        /// Creates new card asynchronously.
        /// </summary>
        /// <param name="number">Number of card.</param>
        /// <param name="issued">Date of issue of card.</param>
        /// <param name="validity">Date of cards validity.</param>
        /// <param name="allowed">Flag, whether card is allowed to use.</param>
        /// <param name="holder">Holder of card.</param>
        /// <returns> Task which resolves into: newly created card.</returns>
        public static System.Threading.Tasks.Task<SemestralProject.Model.Entities.Card> CreateAsync(int number, System.DateTime issued, System.DateTime validity, bool allowed, SemestralProject.Model.Entities.Employee holder)
        {
            return Task<SemestralProject.Model.Entities.Card>.Run(() => {
                return Card.Create(number, issued, validity, allowed, holder);
            });
        }

        /// <summary>
        /// Gets all available cards asynchronously.
        /// </summary>
        /// <returns> Task which resolves into: array with all available cards.</returns>
        public static System.Threading.Tasks.Task<SemestralProject.Model.Entities.Card[]> GetAllAsync()
        {
            return Task<SemestralProject.Model.Entities.Card[]>.Run(() => {
                return Card.GetAll();
            });
        }

        /// <summary>
        /// Gets card by its identifier asynchronously.
        /// </summary>
        /// <param name="id">Identifier of searched card.</param>
        /// <returns> Task which resolves into: card with searched identifier, or NULL if there is no such card.</returns>
        public static System.Threading.Tasks.Task<SemestralProject.Model.Entities.Card?> GetByIdAsync(int id)
        {
            return Task<SemestralProject.Model.Entities.Card?>.Run(() => {
                return Card.GetById(id);
            });
        }

    }
}
